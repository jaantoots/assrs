from typing import final

@final
class Trie:
    def __init__(self, items: list[str] | None = ...) -> None: ...
    @staticmethod
    def new() -> "Trie": ...
    def insert(self, value: str) -> None: ...
    def get(self, value: str) -> str | None: ...
    def contains(self, value: str) -> bool: ...
    def values(self) -> list[str]: ...
    def find_one(
        self, query: str, max_edits: int | None = ...
    ) -> tuple[str, int] | None: ...

@final
class BKTreeLevenshtein:
    def __init__(self, items: list[str] | None = ...) -> None: ...
    @staticmethod
    def new() -> "BKTreeLevenshtein": ...
    def insert(self, value: str) -> None: ...
    def get(self, value: str) -> str | None: ...
    def contains(self, value: str) -> bool: ...
    def values(self) -> list[str]: ...
    def find_one(
        self, query: str, max_edits: int | None = ...
    ) -> tuple[str, int] | None: ...

def levenshtein(a: str, b: str) -> int: ...
def levenshtein_extract(
    query: str, choices: list[str]
) -> tuple[str, int, int] | None: ...
